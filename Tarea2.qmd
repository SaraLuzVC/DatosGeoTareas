---
title: "Tarea 2"
author: "Sara Luz e Iván"
format: pdf
editor: visual
execute:
  cache: true
---

#### Carga de Bibliotecas

```{r message=FALSE}
library(foreign)
library(tidyverse)
library(lubridate)
library(readr)
library(sp)
library(rgdal)
library(pracma)
library(R.utils)
library(geosphere)
library(kableExtra)
library(readr)
```

### Solo puedes usar for, while:

## 1. Obten los centroides de todas las manzanas CDMX con el Censo 2020 del INEGI: liga; Nombre del archivo **09m**.

#### Descarga de la base de datos

Se utilizaron las siguientes ligas:

-   [Censo 2020 CDMX](https://www.inegi.org.mx/contenidos/productos/prod_serv/contenidos/espanol/bvinegi/productos/geografia/marcogeo/889463807469/09_ciudaddemexico.zip)

-   [DENUE CDMX 2020/11](https://www.inegi.org.mx/img/ico/ico_csv.png)

#### Carga de Datos

```{r warning=FALSE}
mzn_censo = readOGR("./Datos/09_ciudaddemexico/conjunto_de_datos/09m.shp")
```

-   Son 66,789 manzanas
-   con 8 variables

#### Análisis de los datos

```{r}
mzn_censo@data %>% head() %>% kable() %>% kable_paper()
```

```{r}
mzn_censo@proj4string
```

```{r}
mzn_censo@polygons[[2]]@Polygons[[1]]@coords %>% head()
```

Los datos se enuentran en cooordenadas un sistema de coordenadas proyectadas

```{r}
plot(mzn_censo, main="Colonias CDMX")
```

-   Lo cambiamos a Latitud y Longitud

```{r warning=FALSE, cache=TRUE}
m = seq(1,length(mzn_censo))
manzanas <- tibble(mzn= numeric(),lon= numeric(),lat= numeric())

for (i in m) {
  
# Agrupamos las coordenadas de la i-ésima manzana a convertir en un data.frame
  x<-mzn_censo@polygons[[i]]@Polygons[[1]]@coords[,1]#longitud
  y<-mzn_censo@polygons[[i]]@Polygons[[1]]@coords[,2]#latitud
  d <- data.frame(lon=x, lat=y)
  coordinates(d) <- c("lon", "lat")

#Escribimos la proyeccion actual de nuestro sistema de coordenadas geográficas
  proj4string(d) <- CRS("+proj=lcc +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102 +x_0=2500000 +y_0=0 +ellps=GRS80 +units=m +no_defs") 
#En CRS.new escribimos la proyección a la que queremos convertir nuestros datos
  CRS.new <- CRS("+proj=longlat +datum=WGS84 +no_defs")  
  
#Transformamos el sistema
  d_proyectado <- spTransform(d, CRS.new)

#Convertirmos los resultados es un nuevo data.frame
  D<-data.frame(mzn=i, d_proyectado)#conviértelo a data frame para que los veas como tabla normal
  manzanas <- manzanas %>% add_row(D)
}

#head(D) %>% kable() %>% kable_paper()
```

#### Cálculo del centroide

```{r}
centroide <- manzanas %>% 
  group_by(mzn) %>% 
  summarise(c_lon=mean(lon), c_lat=mean(lat))
```

-Añadimos clave de la manzana

```{r}
clave_mzn <- mzn_censo@data %>% select(CVE_MZA)
centroide <- centroide %>% add_column(clave_mzn)
head(centroide) %>% kable() %>% kable_paper()
```

## 2. Encuentra la ubicación de todos los OXXO de la CDMX, asegúrate de filtrar correctamente los datos para evitar falsos positivos.

#### Carga de Datos

```{r warning=FALSE}
datos_denue <- read.csv('./Datos/denue_09_1120_csv/denue_09_csv/conjunto_de_datos/denue_inegi_09_.csv')
```

#### Limpieza de datos

-   Primero filtramos todos aquellos que puedan ser un OXXO pero tengan otra razón social

```{r}
datos_denue %>% select(nom_estab, raz_social, latitud, longitud) %>% 
  filter(str_detect(nom_estab, regex("oxxo", ignore_case = TRUE)) | 
           str_detect(nom_estab, regex("oxo", ignore_case = TRUE)) ) %>% 
  filter(raz_social!="CADENA COMERCIAL OXXO SA DE CV") %>% head() %>% kable() %>% kable_paper()
```

-   Usamos Google Maps para revisar las más probables de ser un OXXO, y únicamente una resultó serlo:

![screenshot1](./Screenshot1_tarea2.png) ![screenshot1](./Screenshot2_tarea2.png) ![screenshot1](./Screenshot3_tarea2.png)

-   Con lo cual los datos quedarían como:

```{r}
datos_denue <- datos_denue %>% select(id, nom_estab, raz_social, latitud, longitud, manzana) %>% 
  filter(nom_estab == "CADENA COMERCIAL OXXO" | raz_social=="CADENA COMERCIAL OXXO SA DE CV") %>% 
  tibble() %>% 
  select(id, latitud, longitud, manzana)
datos_denue %>% 
  head() %>% kable() %>% kable_paper()
```

## 3. Determina cuál es OXXO más cercano al Centroide de cada manzana de la CDMX.

-   Primero hacemos una prueba

```{r}
distHaversine(c(datos_denue[[1,3]],datos_denue[[1,2]]),c(centroide[[1,2]],centroide[[1,3]]),r=6378137)
```

-   Posteriormente hacemos un ciclo FOR

OJO hubo que detener este código despés de tres días de estarlo corriendo

**Probar haciendolo por colonia**

```{r cache=TRUE}
# n = seq(1,nrow(datos_denue))
# 
# distancias <- tibble(mzn= numeric(),c_lon= numeric(), c_lat= numeric(), CVE_MZA=character(), 
#                      oxxo=integer(), id=integer(), latitud= numeric(), longitud= numeric(), manzana=integer(), 
#                      distancia=numeric())
# 
# for (i in m) {
#   for (j in n) {
#     d <- distHaversine(c(datos_denue[[j,3]],datos_denue[[j,2]]),c(centroide[[i,2]],centroide[[i,3]]),r=6378137)
#     D <- data.frame(slice(centroide, i), j, slice(datos_denue,j), d)
#     distancias <- distancias %>% rbind(tibble(D))
#   }
#   
# }

distancias = read_csv("./Datos/distancias_miau.csv",show_col_types = FALSE)
```

## 4. Determina cuál es el OXXO que es más cercano a más manzanas de la CDMX.

```{r}
distancias %>% group_by(j) %>% 
  summarise(dist_tot = sum(d)) %>% 
  arrange(dist_tot) %>%
  head()
```

```{r}
distancias %>% filter(j==352)
```

## 5. ¿Cuál es la distancia euclidiana entre el OXXO del punto 4 y este en la Paz?

-   Primero pasamos las coordenadas a UTM

**OJO SON 2 UTMS**

```{r}
# convertimos a coordenadas espaciales
mydf <- structure(list(longitude = c(-99.22285, -110.3136462), latitude = c(19.36876, 24.1421659)), 
                  .Names = c("longitude", "latitude"), class = "data.frame", row.names = c(NA, -2L))

xy <- mydf[,c(1,2)]

spdf <- SpatialPointsDataFrame(coords = xy, data = mydf,
                               proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))

# Utilizamos las coordenadas geograficas y las proyectamos
d <- data.frame(lon=spdf$longitude, lat=spdf$latitude)
coordinates(d) <- c("lon", "lat")

# Estan en lat,lon entonces declaramos la proyeccion usual
sputm <- SpatialPoints(d, proj4string=CRS("+proj=longlat +datum=WGS84"))

# Ya sabemos que todos los puntos estan en la CDMX y por lo tanto, pertenecen a la UTM Zone 14
proyeccion<-CRS("+proj=utm +zone=14 +datum=WGS84 +units=m +no_defs ") 

# Transformamos los datos
UTM <- spTransform(sputm, proyeccion) %>% 
  data.frame()
colnames(UTM) <- c("lon_UTM","lat_UTM")

pto1 <- c(UTM$lon_UTM[1],UTM$lat_UTM[1])
pto2 <- c(UTM$lon_UTM[2],UTM$lat_UTM[2])
```

-   Calculamos distancia euclidiana

```{r}
#Formula
euclidean <- function(a, b) sqrt(sum((a - b)^2))

euclidean(pto1,pto2)
```

## 6. ¿Cuál es la distancia de Haversine entre el OXXO del punto 4 y este en la Paz?

```{r}
distHaversine(c(spdf$longitude[1],spdf$latitude[1]), c(spdf$longitude[2],spdf$latitude[2]), r=6378137)
```

Escribe una rutina de R para cada pregunta. Mantén el orden en tu código y comenta todo.

Colócalo en el Folder de equipo a más tardar, **miércoles 31 de febrero 11 am.**

### Puntuación Extra:

Si tuvieras las coordenadas de los centroides de las manzanas y las de los OXXO en UTM Mercator, ¿Cómo podrías ahorrar operaciones para responder las preguntas anteriores? Diseña un planteamiento teórico - geométrico para la pregunta anterior, considera el espacio geométrico en el que están los puntos en UTM y sus propiedades.
